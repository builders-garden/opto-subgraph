// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Block entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Block must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Block", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Block | null {
    return changetype<Block | null>(store.get_in_block("Block", id));
  }

  static load(id: string): Block | null {
    return changetype<Block | null>(store.get("Block", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get baseFee(): BigInt {
    let value = this.get("baseFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set baseFee(value: BigInt) {
    this.set("baseFee", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockId(): BigInt {
    let value = this.get("blockId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockId(value: BigInt) {
    this.set("blockId", Value.fromBigInt(value));
  }

  get feeAggregator(): FeeAggregatorLoader {
    return new FeeAggregatorLoader(
      "Block",
      this.get("id")!.toString(),
      "feeAggregator",
    );
  }
}

export class FeeAggregator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeAggregator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeAggregator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FeeAggregator", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FeeAggregator | null {
    return changetype<FeeAggregator | null>(
      store.get_in_block("FeeAggregator", id),
    );
  }

  static load(id: string): FeeAggregator | null {
    return changetype<FeeAggregator | null>(store.get("FeeAggregator", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daily(): Array<string> {
    let value = this.get("daily");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set daily(value: Array<string>) {
    this.set("daily", Value.fromStringArray(value));
  }

  get gas_average_daily(): BigInt | null {
    let value = this.get("gas_average_daily");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gas_average_daily(value: BigInt | null) {
    if (!value) {
      this.unset("gas_average_daily");
    } else {
      this.set("gas_average_daily", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class FeeAggregatorLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): FeeAggregator[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<FeeAggregator[]>(value);
  }
}
